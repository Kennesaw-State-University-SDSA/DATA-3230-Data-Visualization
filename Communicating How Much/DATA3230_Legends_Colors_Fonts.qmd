---
title: "Using Legends, Colors, Fonts, and Axes to Improve Visualizations"
author: "Dr Austin R Brown"
institute: "Kennesaw State University"
format: beamer
editor: visual
execute:
  echo: true
  include: true
  warning: false
  message: false
  tidy: false
---

## Introduction

- In the last section, we learned to use bar charts and dot charts to communicate the quantities observed between categorical groups.

\vskip 0.10 in

- We saw how small modifications to our `ggplot2` code can significantly improve the interpretability and aesthetic quality of hte visualization using color and plot themes. 

\vskip 0.10 in

- In this section, we will take that further by learning how to leverage `ggplot2` code to create and modify legends, axis elements, colors, color palettes, text, and fonts.

\vskip 0.10 in

- Let's being by using some text to improve our NYC Garbage visualization.

## Annotating Visualizations with Text

- Recall where we left off with our horizontal bar chart:

```{r,echo=F}
library(tidyverse)

## Let's start with our NYC Trash Horizontal Bar Chart ##

nyc <- readxl::read_xlsx("NYC Trash Data.xlsx")

## Subset to September 2011 ##

nyc_sept11 <- nyc |>
  dplyr::filter(MONTH == 9 & YEAR == 2011)

## Sum up REFUSETONSCOLLECTED variable by Borough ##

trash_tot <- nyc_sept11 |>
  dplyr::group_by(BOROUGH) |>
  dplyr::summarize(Sum_Trash = sum(REFUSETONSCOLLECTED))

## Visualization we left off with: ##

trash_tot |>
  ggplot(aes(x=Sum_Trash,y=reorder(BOROUGH,Sum_Trash))) +
  geom_bar(stat='identity',color='black',fill='white') +
  labs(y = "NYC Borough",
       x = "Total Refuse Collected (in tons)",
       title = "Trash Collected in NYC by Borough",
       subtitle = "September 2011") +
  theme_classic()
```

## Annotating Visualizations with Text

- We can generally see from this visualization that Staten Island produced the least amount of garbage for the month of September 2011 and Brooklyn produced the most.

\vskip 0.10 in

- We can also generally determine the amount of garbage collected. For instance, Staten Island was generally around 20K tons, whereas Queens and Brooklyn were somewhat more than 60K tons.

\vskip 0.10 in

- It might be helpful if we put the actual amount associated with each borough on the bars themselves to increase the amount of information the reader can glean from the visualization.
    - To do this, we can make use of a new geom: `geom_text`
    
## Annotating Visualizations with Text

```{r,eval=F}
trash_tot |>
  ggplot(aes(x=Sum_Trash,y=reorder(BOROUGH,Sum_Trash))) +
  geom_bar(stat='identity',color='black',fill='white') +
  geom_text(aes(label=Sum_Trash)) +
  labs(y = "NYC Borough",
       x = "Total Refuse Collected (in tons)",
       title = "Trash Collected in NYC by Borough",
       subtitle = "September 2011") +
  theme_classic()
```

## Annotating Visualizations with Text

```{r,echo=F}
trash_tot |>
  ggplot(aes(x=Sum_Trash,y=reorder(BOROUGH,Sum_Trash))) +
  geom_bar(stat='identity',color='black',fill='white') +
  geom_text(aes(label=Sum_Trash)) +
  labs(y = "NYC Borough",
       x = "Total Refuse Collected (in tons)",
       title = "Trash Collected in NYC by Borough",
       subtitle = "September 2011") +
  theme_classic()
```

## Annotating Visualizations with Text

- Okay cool! But what is the most obvious problem with this visualization?

\vskip 0.10 in

- The label is centered at the end of the bar, making the text difficult to read. 
    - We can change the justification of the text by using the `hjust` argument. This argument allows us to horizontally adjust the alignment of our text labels.
    
\vskip 0.10 in

- Positive values of `hjust` move the labels to the right whereas negative values move it to the right.
    - Let's try `hjust=1` to move the labels to the right.
    
## Annotating Visualizations with Text

```{r,eval=F}
trash_tot |>
  ggplot(aes(x=Sum_Trash,y=reorder(BOROUGH,Sum_Trash))) +
  geom_bar(stat='identity',color='black',fill='white') +
  geom_text(aes(label=Sum_Trash),hjust = 1) +
  labs(y = "NYC Borough",
       x = "Total Refuse Collected (in tons)",
       title = "Trash Collected in NYC by Borough",
       subtitle = "September 2011") +
  theme_classic()
```

## Annotating Visualizations with Text

```{r,echo=F}
trash_tot |>
  ggplot(aes(x=Sum_Trash,y=reorder(BOROUGH,Sum_Trash))) +
  geom_bar(stat='identity',color='black',fill='white') +
  geom_text(aes(label=Sum_Trash),hjust = 1) +
  labs(y = "NYC Borough",
       x = "Total Refuse Collected (in tons)",
       title = "Trash Collected in NYC by Borough",
       subtitle = "September 2011") +
  theme_classic()
```

## Annotating Visualizations with Text

- Looks better! But now notice that the label itself is rounded to just one decimal place, which seems unusual.

\vskip 0.10 in

- We can fix this, and also move the label more inside of the bar directly within `geom_text`:

## Annotating Visualizations with Text

```{r,eval=F}
trash_tot |>
  ggplot(aes(x=Sum_Trash,y=reorder(BOROUGH,Sum_Trash))) +
  geom_bar(stat='identity',color='black',fill='white') +
  geom_text(aes(label=round(Sum_Trash)),hjust=1.25) +
  labs(y = "NYC Borough",
       x = "Total Refuse Collected (in tons)",
       title = "Trash Collected in NYC by Borough",
       subtitle = "September 2011") +
  theme_classic()
```

## Annotating Visualizations with Text

```{r,echo=F}
trash_tot |>
  ggplot(aes(x=Sum_Trash,y=reorder(BOROUGH,Sum_Trash))) +
  geom_bar(stat='identity',color='black',fill='white') +
  geom_text(aes(label=round(Sum_Trash)),hjust=1.25) +
  labs(y = "NYC Borough",
       x = "Total Refuse Collected (in tons)",
       title = "Trash Collected in NYC by Borough",
       subtitle = "September 2011") +
  theme_classic()
```

## Modifying Font Characteristics

- Our visualization is much improved over what we had originally created!

\vskip 0.10 in

- But consider font style. Right now, our visualization uses a sans serif style font in a black color by default.

\vskip 0.10 in

- What if we wanted to change that?

## Modifying Font Characteristics: Font Family

- While we can specify a wide variety of fonts, the main three guaranteed to work everywhere in a ggplot2 visualization are sans (default), serif (like Times New Roman), and mono (like typewriter font):

```{r,eval=F}
df <- data.frame(x = 1, y = 3:1, 
                 family = c("sans", "serif", "mono"))
df |>
  ggplot(aes(x, y)) + 
  geom_text(aes(label = family, 
                family = family))
```

## Modifying Font Characteristics: Font Family

```{r,echo=F}
df <- data.frame(x = 1, y = 3:1, 
                 family = c("sans", "serif", "mono"))
df |>
  ggplot(aes(x, y)) + 
  geom_text(aes(label = family, 
                family = family))
```

## Modifying Font Characteristics: Font Face

- We can also make our fonts \textbf{bold}, \textit{italic}, \textbf{\textit{bold.italic}} or plain:

```{r,eval=F}
df <- data.frame(x = 1:4, 
                 fontface = c("plain", 
                              "bold", 
                              "italic", 
                              "bold.italic"))
df |>
  ggplot(aes(1, x)) + 
  geom_text(aes(label = fontface, 
                fontface = fontface))
```

## Modifying Font Characteristics: Font Face

```{r,echo=F}
df <- data.frame(x = 1:4, fontface = c("plain", "bold", "italic", "bold.italic"))
df |>
  ggplot(aes(1, x)) + 
  geom_text(aes(label = fontface, fontface = fontface))
```

## Modifying Font Characteristics: Font Color

- We can modify the color of our text uniformly by using the `color` argument within the `geom_text` function by either using a named color (see the `colors()` function for the full list) or using hex codes:

```{r,eval=F}
## Salmon Font ##
df |>
  ggplot(aes(1, x)) + 
  geom_text(aes(label = fontface, 
                fontface = fontface),
            color='salmon')
```

## Modifying Font Characteristics: Font Color


```{r,echo=F}
## Salmon Font ##
df |>
  ggplot(aes(1, x)) + 
  geom_text(aes(label = fontface, 
                fontface = fontface),
            color='salmon')
```

## Modifying Font Characteristics: Font Color

```{r,eval=F}
## Manchester City Light Blue ##
df |>
  ggplot(aes(1, x)) + 
  geom_text(aes(label = fontface, 
                fontface = fontface),
            color = "#6CABDD")
```

## Modifying Font Characteristics: Font Color

```{r,echo=F}
## Manchester City Light Blue ##
df |>
  ggplot(aes(1, x)) + 
  geom_text(aes(label = fontface, 
                fontface = fontface),
            color = "#6CABDD")
```

## Modifying Font Characteristics: Font Color

- For our NYC Garbage example, suppose I want the text to be serif style with a bold italic font face, and in Atlanta Braves red (hex code #CE1141):

```{r,eval=F}
trash_tot |>
  ggplot(aes(x=Sum_Trash,y=reorder(BOROUGH,Sum_Trash))) +
  geom_bar(stat='identity',color='black',fill='white') +
  geom_text(aes(label=round(Sum_Trash)),
            family='serif',
            fontface='bold.italic',
            color='#CE1141',hjust=1.25) +
  labs(y = "NYC Borough",
       x = "Total Refuse Collected (in tons)",
       title = "Trash Collected in NYC by Borough",
       subtitle = "September 2011") +
  theme_classic()
```

## Modifying Font Characteristics: Font Color

```{r,echo=F}
trash_tot |>
  ggplot(aes(x=Sum_Trash,y=reorder(BOROUGH,Sum_Trash))) +
  geom_bar(stat='identity',color='black',fill='white') +
  geom_text(aes(label=round(Sum_Trash)),family='serif',
            fontface='bold.italic',color='#CE1141',hjust=1.25) +
  labs(y = "NYC Borough",
       x = "Total Refuse Collected (in tons)",
       title = "Trash Collected in NYC by Borough",
       subtitle = "September 2011") +
  theme_classic()
```

## Modifying Axes Elements: Axis Length

- Still using our NYC Garbage example, let’s suppose I’d rather have the text labels outside of the bars to the right rather than inside the bars to the left. 

- Remember, we can make a simple change to our `hjust` argument to do this:

\tiny
```{r,eval=F}
trash_tot |>
  ggplot(aes(x=Sum_Trash,y=reorder(BOROUGH,Sum_Trash))) +
  geom_bar(stat='identity',color='black',fill='white') +
  geom_text(aes(label=round(Sum_Trash)),
            family='serif',
            fontface='bold.italic',
            color='#CE1141',
            hjust=-0.25) +
  labs(y = "NYC Borough",
       x = "Total Refuse Collected (in tons)",
       title = "Trash Collected in NYC by Borough",
       subtitle = "September 2011") +
  theme_classic()
```
\normalsize

## Modifying Axes Elements: Axis Length

```{r,echo=F}
trash_tot |>
  ggplot(aes(x=Sum_Trash,y=reorder(BOROUGH,Sum_Trash))) +
  geom_bar(stat='identity',color='black',fill='white') +
  geom_text(aes(label=round(Sum_Trash)),family='serif',
            fontface='bold.italic',color='#CE1141',hjust=-0.25) +
  labs(y = "NYC Borough",
       x = "Total Refuse Collected (in tons)",
       title = "Trash Collected in NYC by Borough",
       subtitle = "September 2011") +
  theme_classic()
```

## Modifying Axes Elements: Axis Length

- Whoops! Now I can’t see Brooklyn’s label! It’s being truncated by the size of our viewing window.

\vskip 0.10 in

- One way this can be modified is by increasing the x-axis length. We can do this by using the `limits` argument within the `scale_x_continuous` function.

## Modifying Axes Elements: Axis Length

```{r,eval=F}
trash_tot |>
  ggplot(aes(x=Sum_Trash,y=reorder(BOROUGH,Sum_Trash))) +
  geom_bar(stat='identity',color='black',fill='white') +
  geom_text(aes(label=round(Sum_Trash)),
            family='serif',
            fontface='bold.italic',
            color='#CE1141',
            hjust=-0.25) +
  labs(y = "NYC Borough",
       x = "Total Refuse Collected (in tons)",
       title = "Trash Collected in NYC by Borough",
       subtitle = "September 2011") +
  theme_classic() +
  scale_x_continuous(limits = c(0,75000))
```

## Modifying Axes Elements: Axis Length

```{r,echo=F}
trash_tot |>
  ggplot(aes(x=Sum_Trash,y=reorder(BOROUGH,Sum_Trash))) +
  geom_bar(stat='identity',color='black',fill='white') +
  geom_text(aes(label=round(Sum_Trash)),
            family='serif',
            fontface='bold.italic',
            color='#CE1141',
            hjust=-0.25) +
  labs(y = "NYC Borough",
       x = "Total Refuse Collected (in tons)",
       title = "Trash Collected in NYC by Borough",
       subtitle = "September 2011") +
  theme_classic() +
  scale_x_continuous(limits = c(0,75000))
```

## Modifying Axes Elements: Tick Marks

- Notice in the prior visualization that our tick marks on the x-axis are in increments of 20,000.

\vskip 0.10 in

- What if we want to increase the number of tick marks to be in increments of 10,000 instead?

\vskip 0.10 in

- We can again use `scale_x_continuous` this time making use of the `breaks` argument.

## Modifying Axes Elements: Tick Marks

```{r,eval=F}
trash_tot |>
  ggplot(aes(x=Sum_Trash,y=reorder(BOROUGH,Sum_Trash))) +
  geom_bar(stat='identity',color='black',fill='white') +
  geom_text(aes(label=round(Sum_Trash)),
            family='serif',
            fontface='bold.italic',
            color='#CE1141',
            hjust=-0.25) +
  labs(y = "NYC Borough",
       x = "Total Refuse Collected (in tons)",
       title = "Trash Collected in NYC by Borough",
       subtitle = "September 2011") +
  theme_classic() +
  scale_x_continuous(limits = c(0,75000),
                     breaks = seq(0,80000,
                                  by=10000))
```

## Modifying Axes Elements: Tick Marks

```{r,echo=F}
trash_tot |>
  ggplot(aes(x=Sum_Trash,y=reorder(BOROUGH,Sum_Trash))) +
  geom_bar(stat='identity',color='black',fill='white') +
  geom_text(aes(label=round(Sum_Trash)),
            family='serif',
            fontface='bold.italic',
            color='#CE1141',
            hjust=-0.25) +
  labs(y = "NYC Borough",
       x = "Total Refuse Collected (in tons)",
       title = "Trash Collected in NYC by Borough",
       subtitle = "September 2011") +
  theme_classic() +
  scale_x_continuous(limits = c(0,75000),
                     breaks = seq(0,80000,
                                  by=10000))
```

## Modifying Axes Elements: Tick Marks

- In the above visualization, we note that each tick mark represents a unit measured in the thousands as we can see by the three trailing zeros in each tick mark label.

\vskip 0.10 in

- We may perhaps wish to represent “thousand” by the common label “K” so that 10000 = 10K.

\vskip 0.10 in

- To do this using `ggplot2`, we can once again use the very useful `scale_x_continuous` function, now adding a new element of functionality – the `labels` function:

## Modifying Axes Elements: Tick Marks

\footnotesize
```{r,eval=F}
trash_tot |>
  ggplot(aes(x=Sum_Trash,y=reorder(BOROUGH,Sum_Trash))) +
  geom_bar(stat='identity',color='black',fill='white') +
  geom_text(aes(label=round(Sum_Trash)),
            family='serif',
            fontface='bold.italic',
            color='#CE1141',
            hjust=-0.25) +
  labs(y = "NYC Borough",
       x = "Total Refuse Collected (in tons)",
       title = "Trash Collected in NYC by Borough",
       subtitle = "September 2011") +
  theme_classic() +
  scale_x_continuous(limits = c(0,75000),
                     breaks = seq(0,80000,
                                  by=10000),
                     labels = scales::label_number(
                       suffix = "K",
                       scale = 1e-3))
```
\normalsize

## Modifying Axes Elements: Tick Marks

- We already learned how to modify font styles in the context of `geom_text`, but we can use the exact same logic and syntax to modify font in our axes as well as titles! 

\vskip 0.10 in

- So suppose we want our tick mark labels and axis titles to match the formatting of our data labels.

\vskip 0.10 in

- We can do this by using the `theme` function in conjunction with the `element_text` function.

## Modifying Axes Elements: Tick Marks

\footnotesize
```{r,eval=F}
## First, Save the Plot to an Object, p ##
p <- trash_tot |>
  ggplot(aes(x=Sum_Trash,y=reorder(BOROUGH,Sum_Trash))) +
  geom_bar(stat='identity',color='black',fill='white') +
  geom_text(aes(label=round(Sum_Trash)),
            family='serif',
            fontface='bold.italic',
            color='#CE1141',
            hjust=-0.25) +
  labs(y = "NYC Borough",
       x = "Total Refuse Collected (in tons)",
       title = "Trash Collected in NYC by Borough",
       subtitle = "September 2011") +
  theme_classic() +
  scale_x_continuous(limits = c(0,75000),
                     breaks = seq(0,80000,
                                  by=10000),
                     labels = scales::label_number(
                       suffix = "K",
                       scale = 1e-3))
```
\normalsize

## Modifying Axes Elements: Tick Marks

```{r,echo=F}
## First, Save the Plot to an Object, p ##
p <- trash_tot |>
  ggplot(aes(x=Sum_Trash,y=reorder(BOROUGH,Sum_Trash))) +
  geom_bar(stat='identity',color='black',fill='white') +
  geom_text(aes(label=round(Sum_Trash)),
            family='serif',
            fontface='bold.italic',
            color='#CE1141',
            hjust=-0.25) +
  labs(y = "NYC Borough",
       x = "Total Refuse Collected (in tons)",
       title = "Trash Collected in NYC by Borough",
       subtitle = "September 2011") +
  theme_classic() +
  scale_x_continuous(limits = c(0,75000),
                     breaks = seq(0,80000,
                                  by=10000),
                     labels = scales::label_number(
                       suffix = "K",
                       scale = 1e-3))
```
```{r,eval=F}
## Now, Modify the Font of the Axes and Titles ##
p +
  theme(axis.text.x = element_text(family = 'serif',
                                   face = 'bold.italic',
                                   color = '#CE1141'),
        axis.title.x = element_text(family = 'serif',
                                    face = 'bold.italic',
                                    color = '#CE1141'),
        axis.text.y = element_text(family = 'serif',
                                   face = 'bold.italic',
                                   color = '#CE1141'),
        axis.title.y = element_text(family = 'serif',
                                    face = 'bold.italic',
                                    color = '#CE1141'))
```

## Modifying Axes Elements: Tick Marks

```{r,echo=F}
## Now, Modify the Font of the Axes and Titles ##
p +
  theme(axis.text.x = element_text(family = 'serif',
                                   face = 'bold.italic',
                                   color = '#CE1141'),
        axis.title.x = element_text(family = 'serif',
                                    face = 'bold.italic',
                                    color = '#CE1141'),
        axis.text.y = element_text(family = 'serif',
                                   face = 'bold.italic',
                                   color = '#CE1141'),
        axis.title.y = element_text(family = 'serif',
                                    face = 'bold.italic',
                                    color = '#CE1141'))
```

## Legends

- Rather than having the bars all be a uniform color (white in this case), suppose I want to have the colors of the bars differ by the particular borough they’re representing. 

\vskip 0.10 in

- We can do so with a very slight modification to the existing code.

\vskip 0.10 in

- In the global `ggplot` function, let’s add `fill=BOROUGH`:

## Legends

\tiny
```{r,eval=F}
trash_tot |>
  ggplot(aes(x=Sum_Trash,y=reorder(BOROUGH,Sum_Trash),
             fill=BOROUGH)) +
  geom_bar(stat='identity',color='black') +
  geom_text(aes(label=round(Sum_Trash)),family='serif',
            fontface='bold.italic',color='#CE1141',hjust=-0.25) +
  labs(y = "NYC Borough",
       x = "Total Refuse Collected (in tons)",
       title = "Trash Collected in NYC by Borough",
       subtitle = "September 2011") +
  theme_classic() +
  theme(axis.text.x = element_text(family = 'serif',
                                   face = 'bold.italic'),
        axis.title.x = element_text(family = 'serif',
                                    face = 'bold.italic'),
        axis.text.y = element_text(family = 'serif',
                                   face = 'bold.italic'),
        axis.title.y = element_text(family = 'serif',
                                    face = 'bold.italic')) +
  scale_x_continuous(limits = c(0,80000),
                     breaks = seq(0,80000,by=10000),
                     labels = scales::label_number(suffix = "K",
                                                   scale = 1e-3))
```
\normalsize

## Legends

```{r,echo=F}
trash_tot |>
  ggplot(aes(x=Sum_Trash,y=reorder(BOROUGH,Sum_Trash),
             fill=BOROUGH)) +
  geom_bar(stat='identity',color='black') +
  geom_text(aes(label=round(Sum_Trash)),family='serif',
            fontface='bold.italic',color='#CE1141',hjust=-0.25) +
  labs(y = "NYC Borough",
       x = "Total Refuse Collected (in tons)",
       title = "Trash Collected in NYC by Borough",
       subtitle = "September 2011") +
  theme_classic() +
  theme(axis.text.x = element_text(family = 'serif',
                                   face = 'bold.italic'),
        axis.title.x = element_text(family = 'serif',
                                    face = 'bold.italic'),
        axis.text.y = element_text(family = 'serif',
                                   face = 'bold.italic'),
        axis.title.y = element_text(family = 'serif',
                                    face = 'bold.italic')) +
  scale_x_continuous(limits = c(0,80000),
                     breaks = seq(0,80000,by=10000),
                     labels = scales::label_number(suffix = "K",
                                                   scale = 1e-3))
```

## Legends

- Cool right? But now, we don't really have a need for the y-axis labels.

\vskip 0.10 in

- We can supress those and the tick marks using the `theme` function:

## Legends

\scriptsize
```{r,eval=F}
trash_tot |>
  ggplot(aes(x=Sum_Trash,y=reorder(BOROUGH,Sum_Trash),
             fill=BOROUGH)) +
  geom_bar(stat='identity',color='black') +
  geom_text(aes(label=round(Sum_Trash)),family='serif',
            fontface='bold.italic',color='#CE1141',hjust=-0.25) +
  labs(y = "NYC Borough",
       x = "Total Refuse Collected (in tons)",
       title = "Trash Collected in NYC by Borough",
       subtitle = "September 2011") +
  theme_classic() +
  theme(axis.text.x = element_text(family = 'serif',
                                   face = 'bold.italic'),
        axis.title.x = element_text(family = 'serif',
                                    face = 'bold.italic'),
        axis.text.y = element_blank(),
        axis.title.y = element_text(family = 'serif',
                                    face = 'bold.italic'),
        axis.ticks.y = element_blank()) +
  scale_x_continuous(limits = c(0,80000),
                     breaks = seq(0,80000,by=10000),
                     labels = scales::label_number(suffix = "K",
                                                   scale = 1e-3))
```
\normalsize

## Legends

```{r,echo=F}
trash_tot |>
  ggplot(aes(x=Sum_Trash,y=reorder(BOROUGH,Sum_Trash),
             fill=BOROUGH)) +
  geom_bar(stat='identity',color='black') +
  geom_text(aes(label=round(Sum_Trash)),family='serif',
            fontface='bold.italic',color='#CE1141',hjust=-0.25) +
  labs(y = "NYC Borough",
       x = "Total Refuse Collected (in tons)",
       title = "Trash Collected in NYC by Borough",
       subtitle = "September 2011") +
  theme_classic() +
  theme(axis.text.x = element_text(family = 'serif',
                                   face = 'bold.italic'),
        axis.title.x = element_text(family = 'serif',
                                    face = 'bold.italic'),
        axis.text.y = element_blank(),
        axis.title.y = element_text(family = 'serif',
                                    face = 'bold.italic'),
        axis.ticks.y = element_blank()) +
  scale_x_continuous(limits = c(0,80000),
                     breaks = seq(0,80000,by=10000),
                     labels = scales::label_number(suffix = "K",
                                                   scale = 1e-3))
```

## Legends

- We can also modify the legend title using the `labs` function.

\vskip 0.10 in

- Also notice that the legend is positioned to the right of the plot by default. We can change this using the `legend.position` argument within `theme` function.
    - We can place it at the `top`, `bottom`, `left`, or `right` of the plot, or we can suppress it entirely by using `legend.position = "none"`.
    - Let's try placing the legend at the bottom of the plot.
    
## Legends

\scriptsize
```{r,eval=F}
## Bottom ##
trash_tot |>
  ggplot(aes(x=Sum_Trash,y=reorder(BOROUGH,Sum_Trash),fill=BOROUGH)) +
  geom_bar(stat='identity',color='black') +
  geom_text(aes(label=round(Sum_Trash)),family='serif',
            fontface='bold.italic',color='#CE1141',hjust=-0.25) +
  labs(y = "NYC Borough",
       x = "Total Refuse Collected (in tons)",
       title = "Trash Collected in NYC by Borough",
       subtitle = "September 2011",
       fill = "Borough") +
  theme_classic() +
  theme(axis.text.x = element_text(family = 'serif',
                                   face = 'bold.italic'),
        axis.title.x = element_text(family = 'serif',
                                    face = 'bold.italic'),
        axis.text.y = element_blank(),
        axis.title.y = element_text(family = 'serif',
                                    face = 'bold.italic'),
        axis.ticks.y = element_blank(),
        legend.position = "bottom") +
  scale_x_continuous(limits = c(0,80000),
                     breaks = seq(0,80000,by=10000),
                     labels = scales::label_number(suffix = "K",
                                                   scale = 1e-3))
```
\normalsize

## Legends

```{r,echo=F}
## Bottom ##
trash_tot |>
  ggplot(aes(x=Sum_Trash,y=reorder(BOROUGH,Sum_Trash),fill=BOROUGH)) +
  geom_bar(stat='identity',color='black') +
  geom_text(aes(label=round(Sum_Trash)),family='serif',
            fontface='bold.italic',color='#CE1141',hjust=-0.25) +
  labs(y = "NYC Borough",
       x = "Total Refuse Collected (in tons)",
       title = "Trash Collected in NYC by Borough",
       subtitle = "September 2011",
       fill = "Borough") +
  theme_classic() +
  theme(axis.text.x = element_text(family = 'serif',
                                   face = 'bold.italic'),
        axis.title.x = element_text(family = 'serif',
                                    face = 'bold.italic'),
        axis.text.y = element_blank(),
        axis.title.y = element_text(family = 'serif',
                                    face = 'bold.italic'),
        axis.ticks.y = element_blank(),
        legend.position = "bottom") +
  scale_x_continuous(limits = c(0,80000),
                     breaks = seq(0,80000,by=10000),
                     labels = scales::label_number(suffix = "K",
                                                   scale = 1e-3))
```

## Legends: Changing Color Palettes

- In the above plot, the generated colors are the defaults.

\vskip 0.10 in

- We can change the palette we use eithr manually or by using palettes within packages such as `viridis` (which uses colorblind-friendly palettes) or `RColorBrewer`.

\vskip 0.10 in

- Let's check out the `viridis` package:

## Legends: Changing Color Palettes

\tiny
```{r,eval=F}
library(viridis)
trash_tot |>
  ggplot(aes(x=Sum_Trash,y=reorder(BOROUGH,Sum_Trash),fill=BOROUGH)) +
  geom_bar(stat='identity',color='black') +
  geom_text(aes(label=round(Sum_Trash)),family='serif',
            fontface='bold.italic',color='#CE1141',hjust=-0.25) +
  labs(y = "NYC Borough",
       x = "Total Refuse Collected (in tons)",
       title = "Trash Collected in NYC by Borough",
       subtitle = "September 2011",
       fill = "Borough") +
  theme_classic() +
  theme(axis.text.x = element_text(family = 'serif',
                                   face = 'bold.italic'),
        axis.title.x = element_text(family = 'serif',
                                    face = 'bold.italic'),
        axis.text.y = element_blank(),
        axis.title.y = element_text(family = 'serif',
                                    face = 'bold.italic'),
        axis.ticks.y = element_blank(),
        legend.position = "bottom") +
  scale_x_continuous(limits = c(0,80000),
                     breaks = seq(0,80000,by=10000),
                     labels = scales::label_number(suffix = "K",
                                                   scale = 1e-3)) +
  scale_fill_viridis(discrete = T)
```
\normalsize

## Legends: Changing Color Palettes

```{r,echo=F}
library(viridis)
trash_tot |>
  ggplot(aes(x=Sum_Trash,y=reorder(BOROUGH,Sum_Trash),fill=BOROUGH)) +
  geom_bar(stat='identity',color='black') +
  geom_text(aes(label=round(Sum_Trash)),family='serif',
            fontface='bold.italic',color='#CE1141',hjust=-0.25) +
  labs(y = "NYC Borough",
       x = "Total Refuse Collected (in tons)",
       title = "Trash Collected in NYC by Borough",
       subtitle = "September 2011",
       fill = "Borough") +
  theme_classic() +
  theme(axis.text.x = element_text(family = 'serif',
                                   face = 'bold.italic'),
        axis.title.x = element_text(family = 'serif',
                                    face = 'bold.italic'),
        axis.text.y = element_blank(),
        axis.title.y = element_text(family = 'serif',
                                    face = 'bold.italic'),
        axis.ticks.y = element_blank(),
        legend.position = "bottom") +
  scale_x_continuous(limits = c(0,80000),
                     breaks = seq(0,80000,by=10000),
                     labels = scales::label_number(suffix = "K",
                                                   scale = 1e-3)) +
  scale_fill_viridis(discrete = T)
```

## Legends: Changing Color Palettes

- Within `scale_fill_viridis`, we have eight different palettes we can specify (A - H). So for example, if I want to employ the “turbo” option (“H”):

\tiny
```{r,eval=F}
trash_tot |>
  ggplot(aes(x=Sum_Trash,y=reorder(BOROUGH,Sum_Trash),fill=BOROUGH)) +
  geom_bar(stat='identity',color='black') +
  geom_text(aes(label=round(Sum_Trash)),family='serif',
            fontface='bold.italic',color='#CE1141',hjust=-0.25) +
  labs(y = "NYC Borough",
       x = "Total Refuse Collected (in tons)",
       title = "Trash Collected in NYC by Borough",
       subtitle = "September 2011",
       fill = "Borough") +
  theme_classic() +
  theme(axis.text.x = element_text(family = 'serif',
                                   face = 'bold.italic'),
        axis.title.x = element_text(family = 'serif',
                                    face = 'bold.italic'),
        axis.text.y = element_blank(),
        axis.title.y = element_text(family = 'serif',
                                    face = 'bold.italic'),
        axis.ticks.y = element_blank(),
        legend.position = "bottom") +
  scale_x_continuous(limits = c(0,80000),
                     breaks = seq(0,80000,by=10000),
                     labels = scales::label_number(suffix = "K",
                                                   scale = 1e-3)) +
  scale_fill_viridis(discrete = T,
                     option = "H")
```
\normalsize

## Legends: Changing Color Palettes

```{r,echo=F}
trash_tot |>
  ggplot(aes(x=Sum_Trash,y=reorder(BOROUGH,Sum_Trash),fill=BOROUGH)) +
  geom_bar(stat='identity',color='black') +
  geom_text(aes(label=round(Sum_Trash)),family='serif',
            fontface='bold.italic',color='#CE1141',hjust=-0.25) +
  labs(y = "NYC Borough",
       x = "Total Refuse Collected (in tons)",
       title = "Trash Collected in NYC by Borough",
       subtitle = "September 2011",
       fill = "Borough") +
  theme_classic() +
  theme(axis.text.x = element_text(family = 'serif',
                                   face = 'bold.italic'),
        axis.title.x = element_text(family = 'serif',
                                    face = 'bold.italic'),
        axis.text.y = element_blank(),
        axis.title.y = element_text(family = 'serif',
                                    face = 'bold.italic'),
        axis.ticks.y = element_blank(),
        legend.position = "bottom") +
  scale_x_continuous(limits = c(0,80000),
                     breaks = seq(0,80000,by=10000),
                     labels = scales::label_number(suffix = "K",
                                                   scale = 1e-3)) +
  scale_fill_viridis(discrete = T,
                     option = "H")
```

## Legends: Changing Color Palettes

- The `RColorBrewer` package also provides a nice set of palettes we can use to customize our visualizations.

\vskip 0.10 in

- We can take a look at the possibilities by:

```{r,eval=F}
library(RColorBrewer)
print(brewer.pal.info)
```

## Legends: Changing Color Palettes

- The first set of palettes (labeled "div") are best for quantitative data.

\vskip 0.10 in

- The third set (labeled "seq") are best for quantitative data with clear extremes.

\vskip 0.10 in

- The middle set (labeled "qual") are best for qualitative data.
    - Let's try `Pastel1` from the "qual" set.
    
## Legends: Changing Color Palettes

\tiny
```{r,eval=F}
library(RColorBrewer)
trash_tot |>
  ggplot(aes(x=Sum_Trash,y=reorder(BOROUGH,Sum_Trash),fill=BOROUGH)) +
  geom_bar(stat='identity',color='black') +
  geom_text(aes(label=round(Sum_Trash)),family='serif',
            fontface='bold.italic',color='#CE1141',hjust=-0.25) +
  labs(y = "NYC Borough",
       x = "Total Refuse Collected (in tons)",
       title = "Trash Collected in NYC by Borough",
       subtitle = "September 2011",
       fill = "Borough") +
  theme_classic() +
  theme(axis.text.x = element_text(family = 'serif',
                                   face = 'bold.italic'),
        axis.title.x = element_text(family = 'serif',
                                    face = 'bold.italic'),
        axis.text.y = element_blank(),
        axis.title.y = element_text(family = 'serif',
                                    face = 'bold.italic'),
        axis.ticks.y = element_blank(),
        legend.position = "bottom") +
  scale_x_continuous(limits = c(0,80000),
                     breaks = seq(0,80000,by=10000),
                     labels = scales::label_number(suffix = "K",
                                                   scale = 1e-3)) +
  scale_fill_brewer(palette = "Pastel1")
```
\normalsize

## Legends: Changing Color Palettes

```{r,echo=F}
library(RColorBrewer)
trash_tot |>
  ggplot(aes(x=Sum_Trash,y=reorder(BOROUGH,Sum_Trash),fill=BOROUGH)) +
  geom_bar(stat='identity',color='black') +
  geom_text(aes(label=round(Sum_Trash)),family='serif',
            fontface='bold.italic',color='#CE1141',hjust=-0.25) +
  labs(y = "NYC Borough",
       x = "Total Refuse Collected (in tons)",
       title = "Trash Collected in NYC by Borough",
       subtitle = "September 2011",
       fill = "Borough") +
  theme_classic() +
  theme(axis.text.x = element_text(family = 'serif',
                                   face = 'bold.italic'),
        axis.title.x = element_text(family = 'serif',
                                    face = 'bold.italic'),
        axis.text.y = element_blank(),
        axis.title.y = element_text(family = 'serif',
                                    face = 'bold.italic'),
        axis.ticks.y = element_blank(),
        legend.position = "bottom") +
  scale_x_continuous(limits = c(0,80000),
                     breaks = seq(0,80000,by=10000),
                     labels = scales::label_number(suffix = "K",
                                                   scale = 1e-3)) +
  scale_fill_brewer(palette = "Pastel1")
```

## Legends: Custom Color Palettes

- Being able to use existing color palettes in R packages like `viridis` and `RColorBrewer` is great, but what if we want to create our own custom color palette?
    - For example, we need to use our company's colors.
    
\vskip 0.10 in

- To do this, we can use the `scale_fill_manual` function and specify the colors we want to use in a vector.
    - Note, we can also use hex colors here rather than named colors.
    
## Legends: Custom Color Palettes

```{r}
## Specify Vector of Colors ##
borough_colors <- c("Bronx" = 'red',
                    "Brooklyn" = 'blue',
                    "Manhattan" = "orange",
                    "Queens" = "yellow",
                    "Staten Island" = 'violet')
```

## Legends: Custom Color Palettes

\tiny
```{r,eval=F}
trash_tot |>
  ggplot(aes(x=Sum_Trash,y=reorder(BOROUGH,Sum_Trash),fill=BOROUGH)) +
  geom_bar(stat='identity',color='black') +
  geom_text(aes(label=round(Sum_Trash)),family='serif',
            fontface='bold.italic',color='#CE1141',hjust=-0.25) +
  labs(y = "NYC Borough",
       x = "Total Refuse Collected (in tons)",
       title = "Trash Collected in NYC by Borough",
       subtitle = "September 2011",
       fill = "Borough") +
  theme_classic() +
  theme(axis.text.x = element_text(family = 'serif',
                                   face = 'bold.italic'),
        axis.title.x = element_text(family = 'serif',
                                    face = 'bold.italic'),
        axis.text.y = element_blank(),
        axis.title.y = element_text(family = 'serif',
                                    face = 'bold.italic'),
        axis.ticks.y = element_blank(),
        legend.position = "bottom") +
  scale_x_continuous(limits = c(0,80000),
                     breaks = seq(0,80000,by=10000),
                     labels = scales::label_number(suffix = "K",
                                                   scale = 1e-3)) +
  scale_fill_manual(values = borough_colors)
```

## Legends: Custom Color Palettes

```{r,echo=F}
trash_tot |>
  ggplot(aes(x=Sum_Trash,y=reorder(BOROUGH,Sum_Trash),fill=BOROUGH)) +
  geom_bar(stat='identity',color='black') +
  geom_text(aes(label=round(Sum_Trash)),family='serif',
            fontface='bold.italic',color='#CE1141',hjust=-0.25) +
  labs(y = "NYC Borough",
       x = "Total Refuse Collected (in tons)",
       title = "Trash Collected in NYC by Borough",
       subtitle = "September 2011",
       fill = "Borough") +
  theme_classic() +
  theme(axis.text.x = element_text(family = 'serif',
                                   face = 'bold.italic'),
        axis.title.x = element_text(family = 'serif',
                                    face = 'bold.italic'),
        axis.text.y = element_blank(),
        axis.title.y = element_text(family = 'serif',
                                    face = 'bold.italic'),
        axis.ticks.y = element_blank(),
        legend.position = "bottom") +
  scale_x_continuous(limits = c(0,80000),
                     breaks = seq(0,80000,by=10000),
                     labels = scales::label_number(suffix = "K",
                                                   scale = 1e-3)) +
  scale_fill_manual(values = borough_colors)
```